
abstract class AiBuilderActivity : AppCompatActivity(), PaymentResultListener {
    companion object {
        const val CARD_DETAILS_REQUEST = 1010
        const val REQUEST_PAY_PAL_CODE_PAYMENT = 2020
    }

    var mProgressDialog: IOSDialog? = null
    private var mInterstitialAd: InterstitialAd? = null
    private var mPremiumUpgradeType: Int = AppConstants.GO_FOR_PREMIUM_APP
    private var mPayStackTransaction: Transaction? = null
    private var mTransactionAmount = "0"
    private var mProductIdForPremium: String? = null
    private var mProductTitleForPremium: String? = null
    private var mPremiumFeatures: Array<String>? = null
    var isPaymentActive = false
    private var mAdTimer: Timer? = null
    private var mTransactionVendorDetails: TransactionVendorModel? = null
    var progressDialog: CustomAlertDialog? = null
    var CONFIG_ENVIRONMENT: String? = null
    var config: PayPalConfiguration? = null
    var mFilePathCallback: ValueCallback<Array<Uri>>? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        isRTLSupportRequired()
        super.onCreate(savedInstanceState)

        RequestConfiguration.Builder()
            .setTestDeviceIds(Arrays.asList("86B4E529E1B826FDF7CA46D82449C55F"))

        if (this::class.simpleName != LoginRequiredActivity::class.simpleName &&
            this::class.simpleName != LoginActivity::class.simpleName &&
            this::class.simpleName != ChatActivity::class.simpleName
        ) {
            Utility.slideActivityRightToLeft(this)
        } else {
            Utility.slideActivityBottomToTop(this)
        }
        setContentView(setLayoutView())

        setOrientation()

        setStatusBarColor()


        if (SessionState.instance.isGoogleInterstitialSupported
            && this::class.simpleName != LoginRequiredActivity::class.simpleName
            && this::class.simpleName != LoginActivity::class.simpleName
            && this::class.simpleName != RegisterUserActivity::class.simpleName
            && this::class.simpleName != SplashActivity::class.simpleName
            && this::class.simpleName != ManualLoginActivity::class.simpleName
        ) {
            scheduleInterstitialAd()
        }
        initialize(savedInstanceState)
    }

    protected abstract fun setLayoutView(): Int

    protected abstract fun initialize(savedInstanceState: Bundle?)

    fun startActivity(clazz: Class<out Activity>, isNewTask: Boolean) {
        val intent = Intent(this, clazz)
        if (isNewTask) {
            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
        }
        startActivity(intent)
    }

    fun startActivityWithAffinity(clazz: Class<out Activity>, isNewTask: Boolean) {
        val intent = Intent(this, clazz)
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
        startActivity(intent)
    }

    fun setOrientation() {
    }

    fun startActivity(clazz: Class<out Activity>, isNewTask: Boolean, bundle: Bundle) {
        val intent = Intent(this, clazz)
        intent.putExtra(AppConstants.BUNDLE, bundle)
        if (isNewTask) {
            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
        }
        startActivity(intent)
    }

    fun startActivityForResult(
        clazz: Class<out Activity>,
        isNewTask: Boolean,
        bundle: Bundle?,
        activityStartCode: Int
    ) {
        val intent = Intent(this, clazz)
        if (bundle != null) {
            intent.putExtra(AppConstants.BUNDLE, bundle)
        }
        if (isNewTask) {
            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
        }
        startActivityForResult(intent, activityStartCode)
    }

    fun startActivity(clazz: Class<out Activity>, extra: Bundle, parcelName: String) {
        val intent = Intent(this, clazz)
        intent.putExtra(AppConstants.BUNDLE, extra)
        startActivity(intent)
    }

    override fun onBackPressed() {
        try {
            super.getOnBackPressedDispatcher().onBackPressed()
            if (this::class.simpleName != LoginRequiredActivity::class.simpleName &&
                this::class.simpleName != LoginActivity::class.simpleName &&
                this::class.simpleName != ChatActivity::class.simpleName
            ) {
                Utility.slideActivityLeftToRight(this)
            } else {
                Utility.slideActivityLeftToRight(this)
            }
        } catch (nullPointerException: NullPointerException) {

        } finally {
            finish()
        }
    }

    private fun loadInterstitialAd() {
        if (!isPaymentActive) {

            Log.i("ADMOBINTERSTITIAL", AppConfigDetail.adInterstitialId!!)

            val adRequest = AdRequest.Builder().build()
            InterstitialAd.load(this, AppConfigDetail.adInterstitialId!!, adRequest,
                object : InterstitialAdLoadCallback() {
                    override fun onAdLoaded(interstitialAd: InterstitialAd) {
                        mInterstitialAd = interstitialAd
                        Log.i("ADMOBINTERSTITIAL", "onAdLoaded")

                        mInterstitialAd!!.fullScreenContentCallback = object :
                            FullScreenContentCallback() {
                            override fun onAdDismissedFullScreenContent() {
                                Log.d("ADMOBINTERSTITIAL", "The ad was dismissed.")
                            }

                            fun onAdFailedToShowFullScreenContent(adError: AdError?) {
                                Log.d("ADMOBINTERSTITIAL", "The ad failed to show.")

                            }

                            override fun onAdShowedFullScreenContent() {
                                mInterstitialAd = null
                                Log.d("ADMOBINTERSTITIAL", "The ad was shown.")
                            }
                        }

                    }

                    override fun onAdFailedToLoad(loadAdError: LoadAdError) {
                        Log.i("ADMOBINTERSTITIAL", loadAdError.message)
                        mInterstitialAd = null
                    }
                })
        }
    }

    private fun scheduleInterstitialAd() {
        val interstitialTask = object : TimerTask() {
            override fun run() {
                this@AiBuilderActivity.runOnUiThread {
                    if (mInterstitialAd != null && !this@AiBuilderActivity.isFinishing && !isPaymentActive) {
                        mInterstitialAd!!.show(this@AiBuilderActivity)
                    }
                }
            }
        }
        val delay = (1000 * 60 * AppConstants.INTERSTITIAL_DELAY)
        mAdTimer?.schedule(interstitialTask, 0L, delay.toLong())

    }

    private fun isRTLSupportRequired() {
        if (AppConstants.DIRECTION_RTL.equals(SessionState.instance.selectedLanguageDirection)) {
            window.decorView.layoutDirection = View.LAYOUT_DIRECTION_RTL
        } else {
            window.decorView.layoutDirection = View.LAYOUT_DIRECTION_LTR
        }
    }

    open fun startRazorpayPayment(title: String, amount: String, upgradeType: Int) {
        val activity: Activity = this
        val co = Checkout()
        co.setKeyID(mTransactionVendorDetails?.razorpayKey)

        if (SessionState.instance.phoneNumber.isNullOrEmpty()) {
            SessionState.instance.phoneNumber = "9999999999"
        }

        try {
            val options = JSONObject()
            options.put(
                "name",
                if (SessionState.instance.appName.isNullOrEmpty()) getString(R.string.app_name) else SessionState.instance.appName
            )
            options.put("description", title)
            options.put("image", "https://s3.amazonaws.com/rzp-mobile/images/rzp.png")
            options.put("currency", SessionState.instance.paymentCurrencyCode)
            val big: Double = java.lang.Double.valueOf(amount)
            val newAmount = big.toInt() * 100
            options.put("amount", newAmount)
            val preFill = JSONObject()
            preFill.put("email", SessionState.instance.email)
            preFill.put("contact", SessionState.instance.phoneNumber)
            options.put("prefill", preFill)
            co.open(activity, options)
        } catch (e: java.lang.Exception) {
            showToast("Error in payment: " + e.message)
            e.printStackTrace()
        }
    }

    override fun onPaymentSuccess(razorpayPaymentID: String?) {
        try {
            if (AppConstants.GO_FOR_PREMIUM_APP == mPremiumUpgradeType) {
                if (!mProductTitleForPremium.isNullOrEmpty() && !mProductIdForPremium.isNullOrEmpty()) {
                    uploadPremiumAppTransactionDetails(
                        mProductTitleForPremium!!,
                        mTransactionAmount,
                        mProductIdForPremium!!,
                        AppConstants.RAZORPAY
                    )
                }
            } else {
                uploadTransactionDetails(
                    mProductTitleForPremium!!,
                    mTransactionAmount,
                    SessionState.instance.userId,
                    mProductIdForPremium!!,
                    mPremiumFeatures!![0],
                    mPremiumFeatures!![1],
                    mPremiumFeatures!![2],
                    AppConstants.RAZORPAY,
                    AppConstants.PAYMENT_TYPE_PREMIUM,
                    AppConstants.PAYMENT_TRANSACTION_DETAILS
                )
            }

        } catch (e: java.lang.Exception) {
            Log.e("RAZORPAY", "Exception in onPaymentSuccess", e)
        }
    }

    override fun onPaymentError(code: Int, response: String) {
        try {
            showAlert(false, "")
        } catch (e: java.lang.Exception) {
            Log.e("RAZORPAY", "Exception in onPaymentError", e)
        }
    }


    open fun startFlutterWavePayment(title: String, amount: String, upgradeType: Int) {

        val txRef: String = SessionState.instance.email + "-" + UUID.randomUUID().toString()
        var stagingMode = false

        if (mTransactionVendorDetails?.flutterWaveStagingMode == "Yes")
            stagingMode = true

        if (SessionState.instance.phoneNumber.isNullOrEmpty())
            SessionState.instance.phoneNumber = "9999999999"


        RaveUiManager(this@AiBuilderActivity).setAmount(amount.toDouble())
            .setCurrency(SessionState.instance.paymentCurrencyCode)
            .setEmail(SessionState.instance.email)
            .setfName(SessionState.instance.userName)
            .setlName("")
            .setNarration(title)
            .setPublicKey(mTransactionVendorDetails?.flutterWavePublicKey)
            .setEncryptionKey(mTransactionVendorDetails?.flutterWaveEncKey)
            .setTxRef(txRef)
            .setPhoneNumber(SessionState.instance.phoneNumber, true)
            .acceptAccountPayments(true)
            .acceptCardPayments(true)
            .acceptMpesaPayments(true)
            .acceptAchPayments(true)
            .acceptGHMobileMoneyPayments(true)
            .acceptUgMobileMoneyPayments(true)
            .acceptZmMobileMoneyPayments(true)
            .acceptRwfMobileMoneyPayments(true)
            .acceptSaBankPayments(true)
            .acceptUkPayments(true)
            .acceptBankTransferPayments(true)
            .acceptUssdPayments(true)
            .acceptBarterPayments(true)
            .allowSaveCardFeature(true)
            .onStagingEnv(stagingMode)
            .withTheme(R.style.FlutterwaveTheme)
            .isPreAuth(true)
            .shouldDisplayFee(true)
            .showStagingLabel(true)
            .initialize()
    }


    private fun launchPayUPaymentFlow(title: String, amount: String, upgradeType: Int) {
        this.mPremiumUpgradeType = upgradeType
        val payUmoneyConfig = PayUmoneyConfig.getInstance()
        payUmoneyConfig.payUmoneyActivityTitle =
            if (SessionState.instance.appName.isNullOrEmpty()) getString(R.string.app_name) else SessionState.instance.appName
        payUmoneyConfig.doneButtonText = "Pay " + HtmlCompat.fromHtml(
            SessionState.instance.paymentCurrencySign,
            HtmlCompat.FROM_HTML_MODE_LEGACY
        ) + amount
        if (SessionState.instance.phoneNumber.isNullOrEmpty()) {
            SessionState.instance.phoneNumber = "9999999999"
        }
        val isDebug = AppConstants.PAY_U_MONEY_TEST_ACCOUNT.equals(
            mTransactionVendorDetails?.payumoneySandboxMode,
            true
        )
        val builder = PayUmoneySdkInitializer.PaymentParam.Builder()
        builder.setAmount(amount)
            .setTxnId(System.currentTimeMillis().toString() + "")
            .setPhone(SessionState.instance.phoneNumber)
            .setProductName(title)
            .setFirstName(SessionState.instance.userName)
            .setEmail(SessionState.instance.email)
            .setsUrl(AppConstants.SURL)
            .setfUrl(AppConstants.FURL)
            .setUdf1("Aa")
            .setUdf2("bb")
            .setUdf3("cc")
            .setUdf4("dd")
            .setUdf5("ee")
            .setIsDebug(isDebug)
            .setKey(mTransactionVendorDetails?.payumoneyMerchantKey)
            .setMerchantId(mTransactionVendorDetails?.payumoneyMerchantId)

        try {
            var mPaymentParams = builder.build()
            calculateHashInServer(mPaymentParams)
        } catch (e: Exception) {
            showToast(e.message)
        }
    }

    fun Context.showToast(message: String?) {
        Toast.makeText(this,
            if (!isInternetAvailable()) getString(R.string.internet_issue) else message ?:
            LanguagePack.getString(getString(R.string.some_wrong)),
            Toast.LENGTH_LONG)
            .show()
    }


    private fun calculateHashInServer(mPaymentParams: PayUmoneySdkInitializer.PaymentParam) {
        ProgressUtils.showLoadingDialog(this)
        val url = AppConstants.BASE_URL + AppConstants.PAY_U_HASH_URL
        val request = object : StringRequest(Request.Method.POST, url,

            Response.Listener { response ->
                var merchantHash = ""

                try {
                    val jsonObject = JSONObject(response)
                    merchantHash = jsonObject.getString("payment_hash")
                } catch (e: JSONException) {
                    e.printStackTrace()
                }

                ProgressUtils.cancelLoading()

                if (merchantHash.isEmpty() || merchantHash == "") {
                    Toast.makeText(this, "Could not generate hash", Toast.LENGTH_SHORT).show()
                } else {
                    mPaymentParams.setMerchantHash(merchantHash)
                    if (PayUAppPreferences.selectedTheme != -1) {
                        PayUmoneyFlowManager.startPayUMoneyFlow(
                            mPaymentParams,
                            this,
                            PayUAppPreferences.selectedTheme,
                            PayUAppPreferences.isOverrideResultScreen
                        )
                    } else {
                        PayUmoneyFlowManager.startPayUMoneyFlow(
                            mPaymentParams,
                            this,
                            R.style.PayUMoney,
                            PayUAppPreferences.isOverrideResultScreen
                        )
                    }
                }
            },

            Response.ErrorListener { error ->
                if (error is NoConnectionError) {
                    Toast.makeText(this, "Connect to internet Volley", Toast.LENGTH_SHORT).show()
                } else {
                    Toast.makeText(this, error.message, Toast.LENGTH_SHORT).show()
                }
                ProgressUtils.cancelLoading()
            }) {
            override fun getParams(): Map<String, String> {
                return mPaymentParams.params
            }
        }
        request.setShouldCache(false)
        Volley.newRequestQueue(this).add(request)
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)

        if (requestCode == RaveConstants.RAVE_REQUEST_CODE && data != null) {
            val message = data.getStringExtra("response")
            if (resultCode == RavePayActivity.RESULT_SUCCESS) {
                try {
                    if (AppConstants.GO_FOR_PREMIUM_APP == mPremiumUpgradeType) {
                        if (!mProductTitleForPremium.isNullOrEmpty() && !mProductIdForPremium.isNullOrEmpty()) {
                            uploadPremiumAppTransactionDetails(
                                mProductTitleForPremium!!,
                                mTransactionAmount,
                                mProductIdForPremium!!,
                                AppConstants.FLUTTER_WAVE
                            )
                        }
                    } else {
                        uploadTransactionDetails(
                            mProductTitleForPremium!!,
                            mTransactionAmount,
                            SessionState.instance.userId,
                            mProductIdForPremium!!,
                            mPremiumFeatures!![0],
                            mPremiumFeatures!![1],
                            mPremiumFeatures!![2],
                            AppConstants.FLUTTER_WAVE,
                            AppConstants.PAYMENT_TYPE_PREMIUM,
                            AppConstants.PAYMENT_TRANSACTION_DETAILS
                        )
                    }
                } catch (e: java.lang.Exception) {
                    Log.e("FLUTTERWAVE", "Exception in onPaymentSuccess", e)
                }
            } else if (resultCode == RavePayActivity.RESULT_ERROR) {
                showAlert(false, "")
            } else if (resultCode == RavePayActivity.RESULT_CANCELLED) {
                showAlert(false, "")
            }
        } else {
            super.onActivityResult(requestCode, resultCode, data)
        }

        if (requestCode == PayUmoneyFlowManager.REQUEST_CODE_PAYMENT && resultCode == Activity.RESULT_OK && data != null) {

            val transactionResponse =
                data.getParcelableExtra<TransactionResponse>(PayUmoneyFlowManager.INTENT_EXTRA_TRANSACTION_RESPONSE)
            val resultModel = data.getParcelableExtra<ResultModel>(PayUmoneyFlowManager.ARG_RESULT)

            if (transactionResponse?.getPayuResponse() != null) {

                when {
                    transactionResponse.transactionStatus == TransactionResponse.TransactionStatus.SUCCESSFUL -> {
                        if (AppConstants.GO_FOR_PREMIUM_APP == mPremiumUpgradeType) {
                            if (!mProductTitleForPremium.isNullOrEmpty() && !mProductIdForPremium.isNullOrEmpty()) {
                                uploadPremiumAppTransactionDetails(
                                    mProductTitleForPremium!!,
                                    mTransactionAmount,
                                    mProductIdForPremium!!,
                                    AppConstants.PAY_U_MONEY
                                )
                            }
                        } else {
                            uploadTransactionDetails(
                                mProductTitleForPremium!!,
                                mTransactionAmount,
                                SessionState.instance.userId,
                                mProductIdForPremium!!,
                                mPremiumFeatures!![0],
                                mPremiumFeatures!![1],
                                mPremiumFeatures!![2],
                                AppConstants.PAY_U_MONEY,
                                AppConstants.PAYMENT_TYPE_PREMIUM,
                                AppConstants.PAYMENT_TRANSACTION_DETAILS
                            )
                        }
                    }
                    transactionResponse.transactionStatus == TransactionResponse.TransactionStatus.CANCELLED -> showAlert(
                        false,
                        ""
                    )
                    transactionResponse.transactionStatus == TransactionResponse.TransactionStatus.FAILED -> showAlert(
                        false,
                        ""
                    )
                }

            } else if (resultModel != null && resultModel.error != null) {
                showAlert(false, "")
            } else {
                showAlert(false, "")
            }
        } else if (requestCode == PayUmoneyFlowManager.REQUEST_CODE_PAYMENT && resultCode == Activity.RESULT_CANCELED) {
            showAlert(false, "")
        } else if (requestCode == CARD_DETAILS_REQUEST && resultCode == Activity.RESULT_OK && data != null) {
            savePayStackCharge()
        } else if (requestCode == CARD_DETAILS_REQUEST && resultCode == Activity.RESULT_CANCELED) {
            showAlert(false, "Payment Canceled")
        } else if (requestCode == REQUEST_PAY_PAL_CODE_PAYMENT) {
            if (resultCode == Activity.RESULT_OK) {
                val confirm =
                    data?.getParcelableExtra<PaymentConfirmation>(PaymentActivity.EXTRA_RESULT_CONFIRMATION)
                if (confirm != null) {
                    try {

                        if (AppConstants.GO_FOR_PREMIUM_APP == mPremiumUpgradeType) {
                            if (!mProductTitleForPremium.isNullOrEmpty() && !mProductIdForPremium.isNullOrEmpty()) {
                                uploadPremiumAppTransactionDetails(
                                    mProductTitleForPremium!!,
                                    mTransactionAmount,
                                    mProductIdForPremium!!,
                                    AppConstants.PAY_PAL
                                )
                            }
                        } else {
                            uploadTransactionDetails(
                                mProductTitleForPremium!!,
                                mTransactionAmount,
                                SessionState.instance.userId,
                                mProductIdForPremium!!,
                                mPremiumFeatures!![0],
                                mPremiumFeatures!![1],
                                mPremiumFeatures!![2],
                                AppConstants.PAY_PAL,
                                AppConstants.PAYMENT_TYPE_PREMIUM,
                                AppConstants.PAYMENT_TRANSACTION_DETAILS
                            )
                        }
                    } catch (e: JSONException) {
                        showAlert(false, "")
                    }


                }
            } else if (resultCode == Activity.RESULT_CANCELED) {
                showAlert(false, "")
            } else if (resultCode == PaymentActivity.RESULT_EXTRAS_INVALID) {
                showAlert(false, "")
            }
        }else if (requestCode == 44745) {
            if (resultCode == RESULT_OK) {
                if (data != null) {

                    val uri: Uri? = data.data
                    val results: Array<Uri> = arrayOf<Uri>(uri!!)


                    mFilePathCallback?.onReceiveValue(results)
                    mFilePathCallback = null
                }
            } else {
                mFilePathCallback?.onReceiveValue(null)
                mFilePathCallback = null
            }
        } else {
            super.onActivityResult(requestCode, resultCode, data)
        }
    }


    fun showAlert(isSuccess: Boolean, message: String) {

        var successMessage = LanguagePack.getString("Congratulations your payment is successful")
        var errorMessage = LanguagePack.getString("Unfortunately your payment failed, please retry")

        if (isSuccess && message.isNotEmpty())
            successMessage = LanguagePack.getString(message)
        else if (!isSuccess && message.isNotEmpty())
            errorMessage = LanguagePack.getString(message)

        val successOrFailureDialog = CustomAlertDialog(this, R.style.payment_chooser_dialog)
        successOrFailureDialog.setContentView(R.layout.success_dialog)
        successOrFailureDialog.window?.setLayout(
            WindowManager.LayoutParams.WRAP_CONTENT,
            WindowManager.LayoutParams.WRAP_CONTENT
        )
        successOrFailureDialog.window?.setBackgroundDrawable(
            ColorDrawable(
                resources.getColor(
                    android.R.color.transparent
                )
            )
        )
        successOrFailureDialog.setCanceledOnTouchOutside(false)
        successOrFailureDialog.show()

        if (!isSuccess) {
            val iconImageView =
                successOrFailureDialog.findViewById<ImageView>(R.id.success_dialog_icon)
            iconImageView.setImageResource(R.drawable.ic_close_circle)
        }

        val dialogTitle = successOrFailureDialog.findViewById(R.id.success_dialog_title) as TextView
        dialogTitle.text =
            if (isSuccess) LanguagePack.getString("Payment Successful") else LanguagePack.getString(
                "Payment Failure"
            )
        val dialogMessage =
            successOrFailureDialog.findViewById(R.id.success_dialog_message) as TextView
        dialogMessage.text = if (isSuccess) successMessage else errorMessage

        val okButton = successOrFailureDialog.findViewById(R.id.success_dialog_ok_button) as Button
        okButton.text = LanguagePack.getString(getString(R.string.btn_ok))
        okButton.setOnClickListener {
            successOrFailureDialog.dismiss()
            if (isSuccess && AppConstants.GO_FOR_PREMIUM_APP == mPremiumUpgradeType) {
                onProductBecamePremium("")
            }
        }

        successOrFailureDialog.setOnDismissListener { isPaymentActive = false }
    }

    fun showPaymentGatewayOptions(
        title: String,
        amount: String,
        upgradeType: Int,
        productId: String?,
        premiumFeatures: Array<String>
    ) {
        val paymentGatewayChooserDialog =
            CustomAlertDialog(this, com.willpro.ai.chatgpt.R.style.payment_chooser_dialog)
        paymentGatewayChooserDialog.setContentView(R.layout.payment_gateway_chooser_dialog)
        paymentGatewayChooserDialog.window?.setLayout(
            WindowManager.LayoutParams.WRAP_CONTENT,
            WindowManager.LayoutParams.WRAP_CONTENT
        )
        paymentGatewayChooserDialog.window?.setBackgroundDrawable(
            ColorDrawable(
                resources.getColor(
                    android.R.color.transparent
                )
            )
        )
        paymentGatewayChooserDialog.setCanceledOnTouchOutside(true)
        paymentGatewayChooserDialog.show()

        mTransactionAmount = amount
        mProductIdForPremium = productId
        mProductTitleForPremium = title
        mPremiumFeatures = premiumFeatures
        val dialogTitle =
            paymentGatewayChooserDialog.findViewById(R.id.payment_gateway_chooser_title) as AppCompatTextView
        dialogTitle.text = LanguagePack.getString("Pay Using")

        val payUMoney =
            paymentGatewayChooserDialog.findViewById(R.id.pay_u_money_gateway) as LinearLayout
        if (!SessionState.instance.isPayUMoneyActive) {
            payUMoney.visibility = View.GONE
        }
        val payStack =
            paymentGatewayChooserDialog.findViewById(R.id.pay_stack_gateway) as LinearLayout
        if (!SessionState.instance.isPayStackActive) {
            payStack.visibility = View.GONE
        }
        val payPal = paymentGatewayChooserDialog.findViewById(R.id.pay_pal_gateway) as LinearLayout
        if (!SessionState.instance.isPayPalActive) {
            payPal.visibility = View.GONE
        }
        val razorPay =
            paymentGatewayChooserDialog.findViewById(R.id.razorpay_gateway) as LinearLayout
        if (!SessionState.instance.isRazorpayActive) {
            razorPay.visibility = View.GONE
        }
        val flutterWave =
            paymentGatewayChooserDialog.findViewById(R.id.flutterwave_gateway) as LinearLayout
        if (!SessionState.instance.isFlutterWaveActive) {
            flutterWave.visibility = View.GONE
        }

        payUMoney.setOnClickListener {
            isPaymentActive = true
            paymentGatewayChooserDialog.dismiss()
            launchPayUPaymentFlow(title, amount, upgradeType)
        }
        payStack.setOnClickListener {
            isPaymentActive = true
            this.mPremiumUpgradeType = upgradeType
            PaystackSdk.setPublicKey(mTransactionVendorDetails?.paystackPublicKey)
            paymentGatewayChooserDialog.dismiss()

            val bundle = Bundle()

            bundle.putString(AppConstants.AMOUNT, mTransactionAmount)
            bundle.putString(AppConstants.TITLE, mProductTitleForPremium)
            bundle.putString(AppConstants.PRODUCT_ID, mProductIdForPremium)
            bundle.putInt(AppConstants.UPGRADE_TYPE, mPremiumUpgradeType)
            bundle.putStringArray(AppConstants.PREMIUM_FEATURES, mPremiumFeatures)

        }
        payPal.setOnClickListener {
            isPaymentActive = true
            this.mPremiumUpgradeType = upgradeType
            paymentGatewayChooserDialog.dismiss()
            val intent = Intent(this, PayPalService::class.java)

            val isSandBox: String? = mTransactionVendorDetails?.paypalSandboxMode

            if (isSandBox == "Yes")
                CONFIG_ENVIRONMENT = PayPalConfiguration.ENVIRONMENT_NO_NETWORK
            else
                CONFIG_ENVIRONMENT = PayPalConfiguration.ENVIRONMENT_PRODUCTION

            config = PayPalConfiguration()
                .environment(CONFIG_ENVIRONMENT)
                .clientId(mTransactionVendorDetails?.paypalClientId)

            val intentService = Intent(this, PayPalService::class.java)
            intentService.putExtra(PayPalService.EXTRA_PAYPAL_CONFIGURATION, config)
            startService(intentService)

            val paymentIntent = Intent(this, PaymentActivity::class.java)

            startActivityForResult(paymentIntent, REQUEST_PAY_PAL_CODE_PAYMENT)
        }
        razorPay.setOnClickListener {
            isPaymentActive = true
            this.mPremiumUpgradeType = upgradeType
            paymentGatewayChooserDialog.dismiss()
            startRazorpayPayment(title, amount, upgradeType)
        }
        flutterWave.setOnClickListener {
            isPaymentActive = true
            this.mPremiumUpgradeType = upgradeType
            paymentGatewayChooserDialog.dismiss()
            startFlutterWavePayment(title, amount, upgradeType)
        }
    }


    private fun savePayStackCharge() {
        try {
            if (AppConstants.GO_FOR_PREMIUM_APP == mPremiumUpgradeType) {
                if (!mProductTitleForPremium.isNullOrEmpty() && !mProductIdForPremium.isNullOrEmpty()) {
                    uploadPremiumAppTransactionDetails(
                        mProductTitleForPremium!!,
                        mTransactionAmount,
                        mProductIdForPremium!!,
                        AppConstants.PAY_STACK
                    )
                }
            } else {
                if (!mProductTitleForPremium.isNullOrEmpty() && !mProductIdForPremium.isNullOrEmpty() &&
                    !mPremiumFeatures.isNullOrEmpty()
                ) {
                    uploadTransactionDetails(
                        mProductTitleForPremium!!,
                        mTransactionAmount,
                        SessionState.instance.userId,
                        mProductIdForPremium!!,
                        mPremiumFeatures!![0],
                        mPremiumFeatures!![1],
                        mPremiumFeatures!![2],
                        AppConstants.PAY_STACK,
                        AppConstants.PAYMENT_TYPE_PREMIUM,
                        AppConstants.PAYMENT_TRANSACTION_DETAILS
                    )
                }
            }

        } catch (e: java.lang.Exception) {
            showAlert(false, "Something went wrong. Please try again later")
        }
    }

    fun uploadTransactionDetails(
        productName: String, amount: String, userId: String, productId: String,
        isFeatured: String, isUrgent: String, isHighlighted: String, folder: String,
        paymentType: String, transactionDetails: String
    ) {
        RetrofitController.postPremiumAdTransactionDetails(productName,
            amount,
            userId,
            productId,
            isFeatured,
            isUrgent,
            isHighlighted,
            folder,
            paymentType,
            transactionDetails,
            object : Callback<TransactionResponseModel> {
                override fun onFailure(call: Call<TransactionResponseModel>?, t: Throwable?) {
                    uploadTransactionDetails(
                        productName, amount, userId, productId, isFeatured, isUrgent,
                        isHighlighted, folder, paymentType, transactionDetails
                    )
                }

                override fun onResponse(
                    call: Call<TransactionResponseModel>?,
                    response: retrofit2.Response<TransactionResponseModel>?
                ) {
                    if (response != null && response.isSuccessful) {
                        if (AppConstants.SUCCESS.equals(response.body()?.success, true)) {
                            if (mProductIdForPremium != null) {
                                onProductBecamePremium(mProductIdForPremium!!)
                            }
                            showAlert(true, "")
                        } else {
                            uploadTransactionDetails(
                                productName, amount, userId, productId, isFeatured, isUrgent,
                                isHighlighted, folder, paymentType, transactionDetails
                            )
                        }
                    } else {
                        uploadTransactionDetails(
                            productName, amount, userId, productId, isFeatured, isUrgent,
                            isHighlighted, folder, paymentType, transactionDetails
                        )
                    }
                }
            })
    }

    fun uploadPremiumAppTransactionDetails(
        planName: String,
        amount: String,
        subId: String,
        folder: String
    ) {
        RetrofitController.postPremiumAppTransactionDetails(planName,
            amount,
            SessionState.instance.userId,
            subId,
            folder,
            object : Callback<TransactionResponseModel> {
                override fun onFailure(call: Call<TransactionResponseModel>?, t: Throwable?) {
                    uploadPremiumAppTransactionDetails(planName, amount, subId, folder)
                }

                override fun onResponse(
                    call: Call<TransactionResponseModel>?,
                    response: retrofit2.Response<TransactionResponseModel>?
                ) {
                    if (response != null && response.isSuccessful) {
                        if (AppConstants.SUCCESS.equals(response.body()?.success, true)) {
                            showAlert(true, "")
                        } else {
                            uploadPremiumAppTransactionDetails(planName, amount, subId, folder)
                        }
                    } else {
                        uploadPremiumAppTransactionDetails(planName, amount, subId, folder)
                    }
                }
            })
    }

    fun getTransactionVendorCredentials(
        title: String,
        amount: String,
        upgradeType: Int,
        productId: String?,
        premiumFeatures: Array<String>
    ) {
        ProgressUtils.showLoadingDialog(this)
        RetrofitController.fetchTransactionVendorCredentials(object :
            Callback<TransactionVendorModel> {
            override fun onFailure(call: Call<TransactionVendorModel>?, t: Throwable?) {
                if (!this@AiBuilderActivity.isFinishing) {
                    showToast(getString(R.string.internet_issue))
                    ProgressUtils.cancelLoading()
                }
            }

            override fun onResponse(
                call: Call<TransactionVendorModel>?,
                response: retrofit2.Response<TransactionVendorModel>?
            ) {
                if (!this@AiBuilderActivity.isFinishing) {
                    if (response != null && response.isSuccessful && response.body() != null) {
                        mTransactionVendorDetails = response.body()!!
                        showPaymentGatewayOptions(
                            title,
                            amount,
                            upgradeType,
                            productId,
                            premiumFeatures
                        )
                    } else {
                        showToast(getString(R.string.some_wrong))
                    }
                    ProgressUtils.cancelLoading()
                }
            }

        })
    }

    open fun onProductBecamePremium(productId: String) {}


    override fun onResume() {
        super.onResume()
        mAdTimer = Timer()
    }

    override fun onPause() {
        super.onPause()
        mAdTimer?.purge()
        mAdTimer?.cancel()
        mAdTimer = null
    }

    fun showProgressDialog() {
        progressDialog = Utility.showProgressView(this)
        progressDialog?.show()
    }

    fun dismissProgressDialog() {
        if (progressDialog != null) {
            progressDialog?.dismiss()
            progressDialog = null
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        stopService(Intent(this, PayPalService::class.java))
    }

    fun setLocation(): String {
        var newLocation = ""

        if (SessionState.instance.selectedCountry.isNotEmpty())
            newLocation += SessionState.instance.selectedCountry
        if (SessionState.instance.selectedState.isNotEmpty())
            newLocation += ", " + SessionState.instance.selectedState
        if (SessionState.instance.selectedCity.isNotEmpty())
            newLocation += ", " + SessionState.instance.selectedCity

        if (SessionState.instance.selectedCountry.isEmpty() && SessionState.instance.selectedState.isEmpty() && SessionState.instance.selectedCity.isEmpty())
            newLocation = getString(R.string.default_country)

        return newLocation
    }

    fun setStatusBarColor() {
        val window: Window = this.window
        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS)
        window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)
        window.statusBarColor = ContextCompat.getColor(this, R.color.colorPrimary)
    }


}
